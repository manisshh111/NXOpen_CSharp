
//Check ApplyCB for the code, rest is generated by Blockstyler NX

using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using NXOpen.UF;


public class ExtrudeBlockStyler2
{
    static UFSession ufSession = UFSession.GetUFSession();
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private static NXOpen.BlockStyler.CurveCollector Selected_Curve;// Block type: Curve Collector
    private static  NXOpen.BlockStyler.StringBlock startLimit;// Block type: String
    private static  NXOpen.BlockStyler.StringBlock endLimit;// Block type: String
    private static  NXOpen.BlockStyler.SpecifyVector direction;// Block type: Specify Vector
    

    public ExtrudeBlockStyler2()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = @"C:\Users\RAJNISH SHARMA\OneDrive\Documents\Visual Studio 2015\Projects\1\ExtrudeBlockStyler2\application\ExtrudeBlockStyler2.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }

    public static void Main()
    {
        ExtrudeBlockStyler2 theExtrudeBlockStyler2 = null;
        try
        {
            theExtrudeBlockStyler2 = new ExtrudeBlockStyler2();
            // The following method shows the dialog immediately
            theExtrudeBlockStyler2.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theExtrudeBlockStyler2 != null)
                theExtrudeBlockStyler2.Dispose();
                theExtrudeBlockStyler2 = null;
        }
    }

     public static int GetUnloadOption(string arg)
    {
      
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
      
    }
    

    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    

    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }


    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    

    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            Selected_Curve = (NXOpen.BlockStyler.CurveCollector)theDialog.TopBlock.FindBlock("Selected_Curve");
            startLimit = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("startLimit");
            endLimit = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("endLimit");
            direction = (NXOpen.BlockStyler.SpecifyVector)theDialog.TopBlock.FindBlock("direction");
 
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }


    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }


    static void Extrude()
    {
       
    }


    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            List<Tag> ObjectsForExtrudeList = new List<Tag>();
            NXOpen.TaggedObject[] objs=  Selected_Curve.GetSelectedObjects();
            foreach(TaggedObject obj in objs)
            {
                Tag objTag = obj.Tag;
                ObjectsForExtrudeList.Add(objTag);
            }

            Tag[] objects = ObjectsForExtrudeList.ToArray();
            string[] limits = { startLimit.Value, endLimit.Value };
            Vector3d dir=  direction.Vector;
            double[] dirArr = { dir.X, dir.Y, dir.Z };
            double[] point = { 0, 0, 0 };
            Tag[] OutFeatures;
            ufSession.Modl.CreateExtruded(objects, "0", limits, point, dirArr, FeatureSigns.Nullsign, out OutFeatures);



        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    

    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == Selected_Curve)
            {
            //---------Enter your code here-----------
            }
            else if(block == startLimit)
            {
            //---------Enter your code here-----------
            }
            else if(block == endLimit)
            {
            //---------Enter your code here-----------
            }
            else if(block == direction)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
